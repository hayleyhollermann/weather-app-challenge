{"version":3,"sources":["components/Footer/Footer.js","components/SearchBar/SearchBar.js","components/CurrentWeather/CurrentWeather.js","components/ThreeDayForecast/ThreeDayForecast.js","components/Forecast/Forecast.js","components/App/App.js","index.js"],"names":["Footer","className","href","title","SearchBar","state","location","setLocation","event","setState","target","value","getWeather","console","log","props","dispatch","type","payload","TextField","onChange","this","variant","size","label","Button","onClick","Component","connect","reduxState","CurrentWeather","id","src","current","condition","icon","alt","text","temp_f","feelslike_f","humidity","gust_mph","forecast","ThreeDayForecast","threeDays","map","date","day","maxtemp_f","mintemp_f","totalprecip_in","avghumidity","maxwind_mph","Forecast","name","region","forecastday","App","rootSaga","getForecast","takeEvery","action","axios","get","response","put","data","sagaMiddleware","createSagaMiddleware","store","createStore","combineReducers","applyMiddleware","logger","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.25368554.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Footer() {\n  return (\n    <div className=\"Footer\">\n        Powered by <a href=\"https://www.weatherapi.com/\" title=\"Weather API\">WeatherAPI.com</a>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { TextField, Button} from '@material-ui/core';\n\nconst mapStateToProps = reduxState => ({\n  reduxState,\n});\n\nclass SearchBar extends Component {\n\n  state = {\n    location: '',\n  }\n\n  setLocation = (event) => {\n    this.setState({location: event.target.value})\n  }\n\n  getWeather = () => {\n    console.log('getting weather for', this.state.location);\n    this.props.dispatch({ type: 'GET_FORECAST', payload: this.state })\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n          <h1>Find Your City!</h1>\n          <TextField onChange={this.setLocation} variant=\"filled\" size=\"small\" label=\"city/zipcode\"/>\n          <Button onClick={this.getWeather}>Go</Button>\n      </div>\n    );\n  }\n\n}\n\nexport default (connect(mapStateToProps)(SearchBar));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = reduxState => ({\n    forecast: reduxState.forecast,\n});\n\nclass CurrentWeather extends Component {\n\n    render() {\n        return (\n            <div className=\"CurrentWeather\">\n                <img id=\"current-weather-icon\" src={this.props.current.condition.icon} alt={this.props.current.condition.text} />\n                <h2>{this.props.current.temp_f}&deg;F</h2>\n                <p>Feels Like: {this.props.current.feelslike_f}&deg;F</p>\n                <p>Humidity: {this.props.current.humidity}</p>\n                <p>Wind: {this.props.current.gust_mph}mph</p>\n            </div>\n        );\n    }\n\n}\n\nexport default (connect(mapStateToProps)(CurrentWeather));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = reduxState => ({\n    forecast: reduxState.forecast,\n});\n\nclass ThreeDayForecast extends Component {\n\n    render() {\n        return (\n            <ul className=\"ThreeDayForecast\">\n                {this.props.threeDays.map((forecast) => \n                    <li className=\"table-row\">\n                        <div className=\"col col-1\">\n                            {forecast.date}\n                        </div>\n                        <div className=\"col col-2\">\n                            <img src={forecast.day.condition.icon} alt={forecast.day.condition.text}/>\n                        </div>\n                        <div className=\"col col-3\">\n                            {forecast.day.maxtemp_f}&deg;F\n                        </div>\n                        <div className=\"col col-4\">\n                            {forecast.day.mintemp_f}&deg;F\n                        </div>\n                        <div className=\"col col-5\">\n                            {forecast.day.totalprecip_in}in\n                        </div>\n                        <div className=\"col col-6\">\n                            {forecast.day.avghumidity}%\n                        </div>\n                        <div className=\"col col-7\">\n                            {forecast.day.maxwind_mph}mph\n                        </div>\n                    </li>\n                )}\n            </ul>\n        );\n    }\n\n}\n\nexport default (connect(mapStateToProps)(ThreeDayForecast));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CurrentWeather from '../CurrentWeather/CurrentWeather';\nimport ThreeDayForecast from '../ThreeDayForecast/ThreeDayForecast';\n\n\nconst mapStateToProps = reduxState => ({\n    forecast: reduxState.forecast,\n});\n\nclass Forecast extends Component {\n\n    render() {\n        return (\n            <div className=\"Forecast\">\n                {this.props.forecast.location ?\n                    <div className=\"show-forecast\">\n                        <h1>{this.props.forecast.location.name}, {this.props.forecast.location.region}</h1>\n                        <CurrentWeather current={this.props.forecast.current} />\n                        <ul className=\"forecast-table\">\n                            <li className=\"table-header\">\n                                <div className=\"col col-1\">Date</div>                                \n                                <div className=\"col col-2\">Condition</div>                                \n                                <div className=\"col col-3\">High</div>\n                                <div className=\"col col-4\">Low</div>\n                                <div className=\"col col-5\">Precipitation</div>\n                                <div className=\"col col-6\">Humidity</div>\n                                <div className=\"col col-7\">Wind</div>\n                            </li>\n                        </ul>\n                        <ThreeDayForecast threeDays={this.props.forecast.forecast.forecastday} />\n                    </div>\n                    : \n                    <div>\n                        <h3>Search for your city above!</h3>\n                        \n                    </div>\n                }\n            </div>\n        );\n    }\n\n}\n\nexport default (connect(mapStateToProps)(Forecast));\n","import React from 'react';\nimport './App.css';\nimport Footer from '../Footer/Footer'\nimport SearchBar from '../SearchBar/SearchBar';\nimport Forecast from '../Forecast/Forecast';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SearchBar/>\n      <Forecast/>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport { takeEvery, put } from 'redux-saga/effects'; \nimport axios from 'axios';\nimport App from './components/App/App';\n\n\nconst forecast = (state = [], action) => {\n  if(action.type === 'SET_FORECAST'){\n      return action.payload\n  } else {\n      return state;\n  }\n}\n\nfunction* rootSaga() {\n  yield takeEvery('GET_FORECAST', getForecast);\n}\n\nfunction* getForecast(action) {\n  try {\n      console.log('in getForecast', action.payload);\n      const response = yield axios.get(`http://localhost:5000/weather/${action.payload.location}`);\n      yield put ({ type: 'SET_FORECAST', payload: response.data})\n  } catch(error) {\n      console.log('error fetching weather', error)\n  }\n}\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  combineReducers({ \n    forecast\n  }),\n  applyMiddleware(sagaMiddleware, logger)\n);\n\nsagaMiddleware.run(rootSaga);\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n"],"sourceRoot":""}